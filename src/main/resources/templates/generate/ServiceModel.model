package PATH.service;

import PATH.dao.ENTITY_NAMEDao;
import PATH.entity.ENTITY_NAMEEntity;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/**
 * DESCservice
 *
 * @author tianslc
 */
@Service
@Transactional(readOnly = true)
public class ENTITY_NAMEService {
    private final ENTITY_NAMEDao ENTITY_ALIASDao;

    public ENTITY_NAMEService(ENTITY_NAMEDao ENTITY_ALIASDao) {
        this.ENTITY_ALIASDao = ENTITY_ALIASDao;
    }

    @Cacheable(value = "ENTITY_ALIASList", key = "'all'")
    public List<ENTITY_NAMEEntity> findAllList() {
        return ENTITY_ALIASDao.findAll();
    }

    public Page<ENTITY_NAMEEntity> getPageByColumn(ENTITY_NAMEEntity ENTITY_ALIASEntity) {
        ExampleMatcher exampleMatcher = ExampleMatcher.matching();
        Example<ENTITY_NAMEEntity> example = Example.of(ENTITY_ALIASEntity, exampleMatcher);
        return ENTITY_ALIASDao.findAll(example, PageRequest.of(ENTITY_ALIASEntity.getPage() - 1, ENTITY_ALIASEntity.getSize(), Sort.by("createDate")));
    }

    public List<ENTITY_NAMEEntity> getListByColumn(ENTITY_NAMEEntity ENTITY_ALIASEntity) {
        Example<ENTITY_NAMEEntity> example = Example.of(ENTITY_ALIASEntity);
        return ENTITY_ALIASDao.findAll(example, Sort.by("createDate"));
    }

    public ENTITY_NAMEEntity getOneByColumn(ENTITY_NAMEEntity ENTITY_ALIASEntity) {
        Example<ENTITY_NAMEEntity> example = Example.of(ENTITY_ALIASEntity);
        return ENTITY_ALIASDao.findOne(example).orElse(null);
    }

    @CacheEvict(value = "ENTITY_ALIASList", allEntries = true)
    @Transactional(readOnly = false)
    public ENTITY_NAMEEntity save(ENTITY_NAMEEntity ENTITY_ALIASEntity) {
        ENTITY_ALIASEntity = ENTITY_ALIASDao.saveAndFlush(ENTITY_ALIASEntity);
        return ENTITY_ALIASEntity;
    }

    public ENTITY_NAMEEntity getById(Integer id) {
        ENTITY_NAMEEntity ENTITY_ALIASEntity = new ENTITY_NAMEEntity(id);
        ENTITY_ALIASEntity.setId(id);
        return getOneByColumn(ENTITY_ALIASEntity);
    }

    @CacheEvict(value = "ENTITY_ALIASList", allEntries = true)
    @Transactional(readOnly = false)
    public void delete(ENTITY_NAMEEntity ENTITY_ALIASEntity) {
        ENTITY_ALIASDao.delete(ENTITY_ALIASEntity);
    }

    @CacheEvict(value = "ENTITY_ALIASList", allEntries = true)
    @Transactional(readOnly = false)
    public void deleteById(Integer id) {
        ENTITY_NAMEEntity ENTITY_ALIASEntity = new ENTITY_NAMEEntity();
        ENTITY_ALIASEntity.setId(id);
        delete(ENTITY_ALIASEntity);
    }
}
